---

# Monitoring
 - name: copy Grafana, Heapster and InfluxDB
   when: deploy_monitoring == true
   copy:
     src: ./files/monitoring/
     dest: /tmp/monitoring/

 - name: deploy Grafana, Heapster and InfluxDB
   when: deploy_monitoring == true
   shell: "kubectl create -f /tmp/monitoring/"
   register: result
   changed_when: '"created" in result.stdout'

 - name: wait for Heapster deployment
   when: deploy_monitoring == true
   shell: "kubectl get pods -n kube-system | grep heapster"
   register: result
   until: result.stdout.find("Running") != -1
   retries: 60
   delay: 10
   changed_when: false

 - name: wait for Grafana deployment
   when: deploy_monitoring == true
   shell: "kubectl get pods -n kube-system | grep grafana"
   register: result
   until: result.stdout.find("Running") != -1
   retries: 60
   delay: 10
   changed_when: false

 - name: wait for InfluxDB deployment
   when: deploy_monitoring == true
   shell: "kubectl get pods -n kube-system | grep influxdb"
   register: result
   until: result.stdout.find("Running") != -1
   retries: 60
   delay: 10
   changed_when: false

# Helm
 - name: copy Helm
   when: deploy_helm == true
   copy:
     src: ./files/helm.yaml
     dest: /tmp/helm.yaml

 - name: deploy Helm service
   when: deploy_helm == true
   shell: "kubectl create -f /tmp/helm.yaml"
   register: result
   changed_when: '"created" in result.stdout'

 - name: Download and unpack Helm client
   when: deploy_helm == true
   unarchive:
     src: https://storage.googleapis.com/kubernetes-helm/helm-v2.7.0-linux-amd64.tar.gz
     dest: /tmp
     remote_src: yes
   environment: '{{ proxy_env | default ({}) }}'

 - name: Copy Helm client to PATH
   when: deploy_helm == true
   copy:
     src: /tmp/linux-amd64/helm
     dest: /usr/local/bin
     remote_src: yes
     mode: 0755
   become: yes
  
 - name: Initialize Helm
   when: deploy_helm == true
   shell: "helm init --service-account helm"
   environment: '{{ proxy_env | default ({}) }}'

 - name: wait for Helm service deployment
   when: deploy_helm == true
   shell: "kubectl get pods -n kube-system | grep tiller-deploy"
   register: result
   until: result.stdout.find("Running") != -1
   retries: 60
   delay: 10
   changed_when: false

# Dashboard
 - name: copy Dashboard 
   when: deploy_dashboard == true
   copy:
     src: ./files/dashboard.yaml
     dest: /tmp/dashboard.yaml

 - name: deploy Dashboard
   when: deploy_dashboard == true
   shell: "kubectl apply -f /tmp/dashboard.yaml"
   register: dashboard
   changed_when: '"created" in dashboard.stdout'

 - name: wait for Dashboard deployment
   when: deploy_dashboard == true
   shell: "kubectl get pods -n kube-system | grep kubernetes-dashboard"
   register: result
   until: result.stdout.find("Running") != -1
   retries: 30
   delay: 10

# Demo App

 - name: deploy sock-shop
   when: deploy_demo_app == true
   shell: "{{ item }}"
   with_items:
   - "kubectl create namespace sock-shop"
   - 'kubectl apply -n sock-shop -f "https://github.com/microservices-demo/microservices-demo/blob/master/deploy/kubernetes/complete-demo.yaml?raw=true"'
   environment: '{{ proxy_env | default ({}) }}'
   register: sock_shop
   changed_when: '"created" in sock_shop.stdout'

 - name: wait for sock-shop deployment
   when: deploy_demo_app == true
   shell: "kubectl get pods -n sock-shop --no-headers=true | grep -ivw running || true"
   register: result
   until: result.stdout == ""
   retries: 60
   delay: 10
   changed_when: false

# Federation
 - name: Download and unpack kubefed
   when: deploy_federation == true
   unarchive:
     src: "https://storage.googleapis.com/kubernetes-release/release/{{ kubernetes_version }}/kubernetes-client-linux-amd64.tar.gz"
     dest: /tmp
     remote_src: yes
   environment: '{{ proxy_env | default ({}) }}'

 - name: Copy kubefed to PATH
   when: deploy_federation == true
   copy:
     src: /tmp/kubernetes/client/bin/kubefed
     dest: /usr/local/bin
     remote_src: yes
     mode: 0755
   become: yes

 - name: Rename current context
   when: deploy_federation == true
   shell: "kubectl config rename-context kubernetes-admin@kubernetes kubernetes"

 - name: Use host-cluster context
   when: deploy_federation == true
   shell: "kubectl config use-context kubernetes"
 
 - name: Clone etcd-repo
   when: deploy_federation == true
   git:
     repo: 'https://github.com/coreos/etcd-operator.git'
     dest: /tmp/etcd-operator
   environment: '{{ proxy_env | default ({}) }}'

 - name: Create RBAC rules for etcd-operator
   when: deploy_federation == true
   shell: /tmp/etcd-operator/example/rbac/create_role.sh

 - name: Deploy etcd-operator
   when: deploy_federation == true
   shell: "kubectl create -f /tmp/etcd-operator/example/deployment.yaml"

 - name: Wait for etcd operator to create a Kubernetes Custom Resource Definition (CRD)
   when: deploy_federation == true
   shell: "kubectl get customresourcedefinitions"
   register: etcd_operator_crd
   until: etcd_operator_crd.stdout != ""
   retries: 60
   delay: 10
   changed_when: false

 - name: Deploy etcd-operator
   when: deploy_federation == true
   shell: "kubectl create -f /tmp/etcd-operator/example/example-etcd-cluster.yaml"

 - name: Copy CoreDNS configuration
   when: deploy_federation == true
   copy:
     src: ./files/coredns/Values.yaml
     dest: /tmp/Values.yaml

 - name: Deploy CoreDNS
   when: deploy_federation == true
   shell: "helm install --name coredns -f /tmp/Values.yaml stable/coredns"

 - name: Wait for CoreDNS deployment
   when: deploy_federation == true
   shell: "kubectl get pods --no-headers=true | grep coredns | grep -ivw running || true"
   register: result
   until: result.stdout == ""
   retries: 60
   delay: 10
   changed_when: false

 - name: Get CoreDNS NodePort
   when: deploy_federation == true
   shell: "kubectl get svc | grep coredns | awk {'print $5'} | cut -f2 -d ':' | cut -f1 -d '/'"
   register: coredns_nodeport

 - name: Copy CoreDNS provider configuration
   when: deploy_federation == true
   template:
    src: ./templates/coredns-provider.conf.j2
    dest: /tmp/coredns-provider.conf

 - name: Deploy federation
   when: deploy_federation == true
   shell: "kubefed init federation --host-cluster-context='kubernetes' --dns-provider='coredns' --dns-provider-config='/tmp/coredns-provider.conf' --dns-zone-name='example.com.' --api-server-service-type='NodePort' --etcd-persistent-storage=false"

 - name: Wait for federation deployment
   when: deploy_federation == true
   shell: "kubectl get pods -n federation-system --no-headers=true | grep -ivw running || true"
   register: result
   until: result.stdout == ""
   retries: 60
   delay: 10
   changed_when: false

# TODO
 - name: Copy merge script
   when: deploy_federation == true
   copy:
     src: ../files/kubeconfig_merge.py
     dest: /tmp/kubeconfig_merge.py
     
 - name: Merge clusters kubeconfig to host-cluster
   when: deploy_federation == true
   shell: python /tmp/kubeconfig_merge.py {{ ansible_env.HOME }} {{ item }}
   with_fileglob: "{{ federation_kubeconfigs_path }}/*"

# - name: Join clusters to federation

 - name: Wait for clusters to become ready
   when: deploy_federation == true
   shell: "kubectl get clusters --context=federation --no-headers=true | grep -ivw ready || true"
   register: result
   until: result.stdout == ""
   retries: 60
   delay: 10
   changed_when: false

   
   


#
#
# - name: copy jenkins yaml
#   copy: src=./files/jenkins.yaml dest=/tmp/jenkins.yaml
#   become: yes
#
# - name: deploy jenkins template
#   shell: "kubectl apply -f /tmp/jenkins.yaml"
#   register: jenkins
#   changed_when: '"created" in jenkins.stdout'
#
# - name: wait for jenkins deployment
#   shell: "while ! kubectl get pods --all-namespaces | grep jenkins | grep running -i | grep '1/1' -q; do sleep 5; done"
#   changed_when: false
#
# - name: copy registry yaml
#   copy: src=./files/registry.yaml dest=/tmp/registry.yaml
#   become: yes
#
# - name: deploy registry template
#   shell: "kubectl apply -f /tmp/registry.yaml"
#   register: registry
#   changed_when: '"created" in registry.stdout'
#
# - name: wait for registry deployment
#   shell: "while ! kubectl get pods --all-namespaces | grep registry | grep -iq running; do sleep 5; done"
#   changed_when: false
#
# - name: get cluster info
#   shell: "kubectl cluster-info"
#   register: clusterinfo
#   changed_when: false
#
# - name: show cluster info
#   debug: msg="{{ item }}"
#   with_items: 
#     - "{{ clusterinfo.stdout_lines }}"
#
# - name: get jenkins password
#   shell: "kubectl exec -n kube-system $(kubectl get pods -n kube-system --selector=app=jenkins --output=jsonpath={.items..metadata.name}) -- cat /root/.jenkins/secrets/initialAdminPassword"
#   register: jenkins_password
#   changed_when: false
#
# - name: show jenkins password
#   debug: var=jenkins_password.stdout
#
# - name: save jenkins password
#   local_action: copy content={{ jenkins_password.stdout }} dest=~/jenkins_password
