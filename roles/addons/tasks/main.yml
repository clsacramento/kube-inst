---

# Monitoring
 - name: copy Grafana, Heapster and InfluxDB
   when: deploy_monitoring == true
   copy:
     src: ./files/monitoring/
     dest: /tmp/monitoring/

 - name: deploy Grafana, Heapster and InfluxDB
   when: deploy_monitoring == true
   shell: "kubectl create -f /tmp/monitoring/"
   register: result
   changed_when: '"created" in result.stdout'

 - name: wait for Heapster deployment
   when: deploy_monitoring == true
   shell: "kubectl get pods -n kube-system | grep heapster"
   register: result
   until: result.stdout.find("Running") != -1
   retries: 60
   delay: 10
   changed_when: false

 - name: wait for Grafana deployment
   when: deploy_monitoring == true
   shell: "kubectl get pods -n kube-system | grep grafana"
   register: result
   until: result.stdout.find("Running") != -1
   retries: 60
   delay: 10
   changed_when: false

 - name: wait for InfluxDB deployment
   when: deploy_monitoring == true
   shell: "kubectl get pods -n kube-system | grep influxdb"
   register: result
   until: result.stdout.find("Running") != -1
   retries: 60
   delay: 10
   changed_when: false

# Dashboard
 - name: copy dashboard yamls
   copy: src=./files/dashboard dest=/tmp/.

 - name: deploy Dashboard addon
   shell: "kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml"
   register: dashboard
   changed_when: '"created" in dashboard.stdout'

 - name: wait for Dashboard deployment
   shell: "kubectl get pods -n kube-system | grep dashboard"
   register: result
   until: result.stdout.find("Running") != -1
   retries: 30
   delay: 10






# Demo App

 - name: deploy sock-shop
   when: deploy_demo_app == true
   shell: "{{ item }}"
   with_items:
   - "kubectl create namespace sock-shop"
   - 'kubectl apply -n sock-shop -f "https://github.com/microservices-demo/microservices-demo/blob/master/deploy/kubernetes/complete-demo.yaml?raw=true"'
   register: sock_shop
   changed_when: '"created" in sock_shop.stdout'

 - name: wait for sock-shop deployment
   when: deploy_demo_app == true
   shell: "while ! kubectl get pods -n sock-shop | grep -iq running; do sleep 5; done"
   changed_when: false

#
#
# - name: copy jenkins yaml
#   copy: src=./files/jenkins.yaml dest=/tmp/jenkins.yaml
#   become: yes
#
# - name: deploy jenkins template
#   shell: "kubectl apply -f /tmp/jenkins.yaml"
#   register: jenkins
#   changed_when: '"created" in jenkins.stdout'
#
# - name: wait for jenkins deployment
#   shell: "while ! kubectl get pods --all-namespaces | grep jenkins | grep running -i | grep '1/1' -q; do sleep 5; done"
#   changed_when: false
#
# - name: copy registry yaml
#   copy: src=./files/registry.yaml dest=/tmp/registry.yaml
#   become: yes
#
# - name: deploy registry template
#   shell: "kubectl apply -f /tmp/registry.yaml"
#   register: registry
#   changed_when: '"created" in registry.stdout'
#
# - name: wait for registry deployment
#   shell: "while ! kubectl get pods --all-namespaces | grep registry | grep -iq running; do sleep 5; done"
#   changed_when: false
#
# - name: get cluster info
#   shell: "kubectl cluster-info"
#   register: clusterinfo
#   changed_when: false
#
# - name: show cluster info
#   debug: msg="{{ item }}"
#   with_items: 
#     - "{{ clusterinfo.stdout_lines }}"
#
# - name: get jenkins password
#   shell: "kubectl exec -n kube-system $(kubectl get pods -n kube-system --selector=app=jenkins --output=jsonpath={.items..metadata.name}) -- cat /root/.jenkins/secrets/initialAdminPassword"
#   register: jenkins_password
#   changed_when: false
#
# - name: show jenkins password
#   debug: var=jenkins_password.stdout
#
# - name: save jenkins password
#   local_action: copy content={{ jenkins_password.stdout }} dest=~/jenkins_password
